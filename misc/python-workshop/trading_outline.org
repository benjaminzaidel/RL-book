* Outline

Introduce the key features of Python through the story of how to design a trading application. The trading application involves:

1. Collecting and organizing daily time-series data of a stock
2. Training a model to predict next day's price probabilities, given the time-series history.
3. Testing the above price prediction model, using out-of-sample data
4. Defining a price movements model, that is used to develop a simulator of price movements
4. Defining the maximizing function of a trading bot that makes two decisions: when to buy and when to sell
5. Allowing flexibility in the specification of rules to decide when to buy and when to sell
6. Given a maximizing function and above-defined price movements simulator, creating an optimization algorithm that identifies the optimal rule for buy decision and sell decision.
7. Testing a <buy rule, sell rule> against:
   a) Out of sample time-series history
   b) above-defined price movements simulator

Note that this workshop is less about modeling and algorithms, and more about the Python features that help us develop these models and algorithms, reason about them, debug them, modify and extend them, and make it easy to read and understand them.

So we have to keep the technical details of designing the trading application very simple in mathematical/statistical terms. For example, to train a model of next day's price probabilities, we will not build a complex ML model, we will instead build a simple regression model with hand-crafted features. But the key is to allow for a scientist to come in later and use an ML model in place of our simple regression model (so, emphasis on interace design/abstract classes). Likewise, we won't talk about MDPs or RL in identifying an optimal policy. Rather, we will keep the optimization of buy/sell decision at a very basic level. Perhaps we won't even do the optimization in this class, and instead focus on the software design of the optimization engine and simply use a few hand-crafted heuristic rules (later a scientist should be able to come in and develop a sophisticated simulator and simply slot in her optimized buy/sell policy in place of our simple buy/sell policy). 

Few thoughts:

  - For simulations, we can use iterators/generators.
  - We can treat the maximizing function as a first-class object and create higher-level functions for optimization and backtesting.
  - Show how dataclasses simplify the code by writing a class first without dataclass, and then with a dataclass (follow the pattern of the example in Chapter 2 of the book).
  - We could split the class on Day 2 into breakout groups, each led by a teacher (instructors + TA, so about 6 breakout groups), and have each breakout group work on one of the modules listed above (even though these modules are sequential). It is important to have some scaffolding of code so that the actual work done by the students in the 3 hours is not a lot of code. So lots of code-scaffolding and lots of hints/comments (3 hours is far too less to do anything from scratch).

